// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TermProject.Models;

#nullable disable

namespace TermProject.Migrations
{
    [DbContext(typeof(MonstersContext))]
    partial class MonstersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TermProject.Models.Handler", b =>
                {
                    b.Property<int>("HandlerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HandlerId"), 1L, 1);

                    b.Property<string>("HandlerDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandlerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandlerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HandlerId");

                    b.ToTable("Handler");

                    b.HasData(
                        new
                        {
                            HandlerId = 1,
                            HandlerDescription = "Starman",
                            HandlerName = "David Bowie",
                            HandlerType = "Cosmic"
                        },
                        new
                        {
                            HandlerId = 2,
                            HandlerDescription = "Queen",
                            HandlerName = "Mercury, Freddy",
                            HandlerType = "Royal"
                        },
                        new
                        {
                            HandlerId = 3,
                            HandlerDescription = "Toons",
                            HandlerName = "Tom and Jerry",
                            HandlerType = "Toon physics specialist"
                        });
                });

            modelBuilder.Entity("TermProject.Models.Monsters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("HandlerDescriptionHandlerId")
                        .HasColumnType("int");

                    b.Property<int>("HandlerId")
                        .HasColumnType("int");

                    b.Property<int?>("HandlerNameHandlerId")
                        .HasColumnType("int");

                    b.Property<int?>("HandlerTypeHandlerId")
                        .HasColumnType("int");

                    b.Property<int?>("MonsterCount")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("MonsterName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MonsterThreatLvl")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("MonsterTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeDescriptionMonsterTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeMonsterTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HandlerDescriptionHandlerId");

                    b.HasIndex("HandlerId");

                    b.HasIndex("HandlerNameHandlerId");

                    b.HasIndex("HandlerTypeHandlerId");

                    b.HasIndex("MonsterTypeId");

                    b.HasIndex("TypeDescriptionMonsterTypeId");

                    b.HasIndex("TypeMonsterTypeId");

                    b.ToTable("Monsters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HandlerId = 2,
                            MonsterCount = 1,
                            MonsterName = "Mothman",
                            MonsterThreatLvl = 3,
                            MonsterTypeId = 2
                        },
                        new
                        {
                            Id = 2,
                            HandlerId = 1,
                            MonsterCount = 2,
                            MonsterName = "Kaiju",
                            MonsterThreatLvl = 5,
                            MonsterTypeId = 3
                        },
                        new
                        {
                            Id = 3,
                            HandlerId = 3,
                            MonsterCount = 201,
                            MonsterName = "Poltergeist",
                            MonsterThreatLvl = 2,
                            MonsterTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            HandlerId = 3,
                            MonsterCount = 999,
                            MonsterName = "Grim Grinning Ghosts Gang",
                            MonsterThreatLvl = 1,
                            MonsterTypeId = 1
                        });
                });

            modelBuilder.Entity("TermProject.Models.MonsterType", b =>
                {
                    b.Property<int>("MonsterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MonsterTypeId"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("MonsterTypeId");

                    b.ToTable("MonsterTypes");

                    b.HasData(
                        new
                        {
                            MonsterTypeId = 1,
                            Type = "Holy",
                            TypeDescription = "Holy type arcana, typically former priests of religion."
                        },
                        new
                        {
                            MonsterTypeId = 2,
                            Type = "Cosmic",
                            TypeDescription = "Usually Celestial being, usually requires space travel to fight"
                        },
                        new
                        {
                            MonsterTypeId = 3,
                            Type = "Infernal",
                            TypeDescription = "These entities usually are from hell or have a connection to it."
                        });
                });

            modelBuilder.Entity("TermProject.Models.Monsters", b =>
                {
                    b.HasOne("TermProject.Models.Handler", "HandlerDescription")
                        .WithMany()
                        .HasForeignKey("HandlerDescriptionHandlerId");

                    b.HasOne("TermProject.Models.Handler", "Handler")
                        .WithMany()
                        .HasForeignKey("HandlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TermProject.Models.Handler", "HandlerName")
                        .WithMany()
                        .HasForeignKey("HandlerNameHandlerId");

                    b.HasOne("TermProject.Models.Handler", "HandlerType")
                        .WithMany()
                        .HasForeignKey("HandlerTypeHandlerId");

                    b.HasOne("TermProject.Models.MonsterType", "MonsterType")
                        .WithMany()
                        .HasForeignKey("MonsterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TermProject.Models.MonsterType", "TypeDescription")
                        .WithMany()
                        .HasForeignKey("TypeDescriptionMonsterTypeId");

                    b.HasOne("TermProject.Models.MonsterType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeMonsterTypeId");

                    b.Navigation("Handler");

                    b.Navigation("HandlerDescription");

                    b.Navigation("HandlerName");

                    b.Navigation("HandlerType");

                    b.Navigation("MonsterType");

                    b.Navigation("Type");

                    b.Navigation("TypeDescription");
                });
#pragma warning restore 612, 618
        }
    }
}
